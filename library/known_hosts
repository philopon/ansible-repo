#!/usr/bin/python
import os

SSH_KEYSCAN = "ssh-keyscan"
SSH_KEYGEN  = "ssh-keygen"
KNOWN_HOSTS = os.path.expanduser('~/.ssh/known_hosts')

def check_pipe(prog):
    proc = subprocess.Popen(
            prog,
            stdout = subprocess.PIPE,
            stderr = subprocess.PIPE,
            )
    code = proc.wait()
    if code != 0:
        msg = proc.stderr.read()
        proc.stdout.close()
        proc.stderr.close()
        raise subprocess.CalledProcessError(code, prog, msg)
    else:
        proc.stderr.close()
        return proc.stdout

import re
host_re = re.compile('#\s*host\s+(\S+)\s+found[:\s]+line\s+(\d+)\s+type\s+(\S+)', re.IGNORECASE)

def find_known_hosts(host):
    if not os.path.isfile(KNOWN_HOSTS): return []

    pipe = check_pipe([SSH_KEYGEN, '-F', host])
    ret = []
    for line in pipe:
        match = host_re.match(line)
        if match:
            ret.append((match.group(1), int(match.group(2)), match.group(3)))
    pipe.close()
    return ret
            
def ssh_keyscan(host, hash):
    args = [SSH_KEYSCAN]
    if hash: args.append('-H')
    args.append(host)
    output = subprocess.check_output(args, stderr = open(os.devnull, 'w'))
    return output

def present(module, host, hash, check):
    import subprocess
    hits = find_known_hosts(host)
    if check: module.exit_json(changed = bool(hits))
    if hits:  module.exit_json(changed = False)

    with open(KNOWN_HOSTS, 'a') as file:
        file.write(ssh_keyscan(host, hash))
    module.exit_json(changed = True)

from ansible.module_utils.basic import *
def main():
    import os
    module = AnsibleModule(
            argument_spec = dict(
                host  = dict(required=True, aliases=['name', 'line']),
                hash  =  dict(default=True, choices=BOOLEANS),
                state = dict(default='present', choices=['present']),
                ),
            supports_check_mode = True
            )
    host  = module.params['host']
    hash  = module.params['hash']
    state = module.params['state']

    check = module.check_mode

    if state == 'present':
        try:
            present(module, host, hash, check)
        except Exception as e:
            module.exit_json(changed = False, msg=str(e))

main()
